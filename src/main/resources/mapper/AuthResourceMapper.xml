<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.usthe.bootshiro.dao.AuthResourceMapper">
  <resultMap id="BaseResultMap" type="com.usthe.bootshiro.domain.bo.AuthResource">
    <id column="ID" jdbcType="INTEGER" property="id" />
    <result column="CODE" jdbcType="VARCHAR" property="code" />
    <result column="NAME" jdbcType="VARCHAR" property="name" />
    <result column="PARENT_ID" jdbcType="INTEGER" property="parentId" />
    <result column="URL" jdbcType="VARCHAR" property="url" />
    <result column="TYPE" jdbcType="SMALLINT" property="type" />
    <result column="STATUS" jdbcType="SMALLINT" property="status" />
  </resultMap>
  <sql id="Example_Where_Clause">
    <where>
      <foreach collection="oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Update_By_Example_Where_Clause">
    <where>
      <foreach collection="example.oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Base_Column_List">
    ID, CODE, NAME, PARENT_ID, URL, TYPE, STATUS
  </sql>
  <select id="selectByExample" parameterType="com.usthe.bootshiro.domain.bo.AuthResourceExample" resultMap="BaseResultMap">
    select
    <if test="distinct">
      distinct
    </if>
    'true' as QUERYID,
    <include refid="Base_Column_List" />
    from auth_resource
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null">
      order by ${orderByClause}
    </if>
  </select>
  <select id="selectByPrimaryKey" parameterType="java.lang.Integer" resultMap="BaseResultMap">
    select 
    <include refid="Base_Column_List" />
    from auth_resource
    where ID = #{id,jdbcType=INTEGER}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Integer">
    delete from auth_resource
    where ID = #{id,jdbcType=INTEGER}
  </delete>
  <insert id="insert" keyColumn="ID" keyProperty="id" parameterType="com.usthe.bootshiro.domain.bo.AuthResource" useGeneratedKeys="true">
    insert into auth_resource (CODE, NAME, PARENT_ID, 
      URL, TYPE, STATUS
      )
    values (#{code,jdbcType=VARCHAR}, #{name,jdbcType=VARCHAR}, #{parentId,jdbcType=INTEGER}, 
      #{url,jdbcType=VARCHAR}, #{type,jdbcType=SMALLINT}, #{status,jdbcType=SMALLINT}
      )
  </insert>
  <insert id="insertSelective" keyColumn="ID" keyProperty="id" parameterType="com.usthe.bootshiro.domain.bo.AuthResource" useGeneratedKeys="true">
    insert into auth_resource
    <trim prefix="(" suffix=")" suffixOverrides=",">
      <if test="code != null">
        CODE,
      </if>
      <if test="name != null">
        NAME,
      </if>
      <if test="parentId != null">
        PARENT_ID,
      </if>
      <if test="url != null">
        URL,
      </if>
      <if test="type != null">
        TYPE,
      </if>
      <if test="status != null">
        STATUS,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides=",">
      <if test="code != null">
        #{code,jdbcType=VARCHAR},
      </if>
      <if test="name != null">
        #{name,jdbcType=VARCHAR},
      </if>
      <if test="parentId != null">
        #{parentId,jdbcType=INTEGER},
      </if>
      <if test="url != null">
        #{url,jdbcType=VARCHAR},
      </if>
      <if test="type != null">
        #{type,jdbcType=SMALLINT},
      </if>
      <if test="status != null">
        #{status,jdbcType=SMALLINT},
      </if>
    </trim>
  </insert>
  <update id="updateByExampleSelective" parameterType="map">
    update auth_resource
    <set>
      <if test="record.id != null">
        ID = #{record.id,jdbcType=INTEGER},
      </if>
      <if test="record.code != null">
        CODE = #{record.code,jdbcType=VARCHAR},
      </if>
      <if test="record.name != null">
        NAME = #{record.name,jdbcType=VARCHAR},
      </if>
      <if test="record.parentId != null">
        PARENT_ID = #{record.parentId,jdbcType=INTEGER},
      </if>
      <if test="record.url != null">
        URL = #{record.url,jdbcType=VARCHAR},
      </if>
      <if test="record.type != null">
        TYPE = #{record.type,jdbcType=SMALLINT},
      </if>
      <if test="record.status != null">
        STATUS = #{record.status,jdbcType=SMALLINT},
      </if>
    </set>
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByExample" parameterType="map">
    update auth_resource
    set ID = #{record.id,jdbcType=INTEGER},
      CODE = #{record.code,jdbcType=VARCHAR},
      NAME = #{record.name,jdbcType=VARCHAR},
      PARENT_ID = #{record.parentId,jdbcType=INTEGER},
      URL = #{record.url,jdbcType=VARCHAR},
      TYPE = #{record.type,jdbcType=SMALLINT},
      STATUS = #{record.status,jdbcType=SMALLINT}
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByPrimaryKeySelective" parameterType="com.usthe.bootshiro.domain.bo.AuthResource">
    update auth_resource
    <set>
      <if test="code != null">
        CODE = #{code,jdbcType=VARCHAR},
      </if>
      <if test="name != null">
        NAME = #{name,jdbcType=VARCHAR},
      </if>
      <if test="parentId != null">
        PARENT_ID = #{parentId,jdbcType=INTEGER},
      </if>
      <if test="url != null">
        URL = #{url,jdbcType=VARCHAR},
      </if>
      <if test="type != null">
        TYPE = #{type,jdbcType=SMALLINT},
      </if>
      <if test="status != null">
        STATUS = #{status,jdbcType=SMALLINT},
      </if>
    </set>
    where ID = #{id,jdbcType=INTEGER}
  </update>
  <update id="updateByPrimaryKey" parameterType="com.usthe.bootshiro.domain.bo.AuthResource">
    update auth_resource
    set CODE = #{code,jdbcType=VARCHAR},
      NAME = #{name,jdbcType=VARCHAR},
      PARENT_ID = #{parentId,jdbcType=INTEGER},
      URL = #{url,jdbcType=VARCHAR},
      TYPE = #{type,jdbcType=SMALLINT},
      STATUS = #{status,jdbcType=SMALLINT}
    where ID = #{id,jdbcType=INTEGER}
  </update>

  <select id="selectRoleRules" resultType="com.usthe.bootshiro.shiro.rule.RolePermRule">
    select re.URL as url,GROUP_CONCAT(rol.CODE ORDER BY re.URL) as needRoles
    from auth_resource re
    LEFT JOIN auth_role_resource ro on re.id = ro.RESOURCE_ID
    LEFT JOIN auth_role rol on ro.ROLE_ID = rol.CODE
    GROUP BY
    re.URL
  </select>
</mapper>